{"ast":null,"code":"import _objectSpread from\"C:/Users/yeldos.k/Desktop/final-map-app/client/client/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import _toConsumableArray from\"C:/Users/yeldos.k/Desktop/final-map-app/client/client/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";import{createSelector,createEntityAdapter}from\"@reduxjs/toolkit\";import{apiSlice}from\"../../app/api/apiSlice\";var usersAdapter=createEntityAdapter({});var initialState=usersAdapter.getInitialState();export var usersApiSlice=apiSlice.injectEndpoints({endpoints:function endpoints(builder){return{getUsers:builder.query({query:function query(){return'/users';},validateStatus:function validateStatus(response,result){return response.status===200&&!result.isError;},keepUnusedDataFor:5,transformResponse:function transformResponse(responseData){var loadedUsers=responseData.map(function(user){user.id=user._id;return user;});return usersAdapter.setAll(initialState,loadedUsers);},providesTags:function providesTags(result,error,arg){if(result!==null&&result!==void 0&&result.ids){return[{type:'User',id:'LIST'}].concat(_toConsumableArray(result.ids.map(function(id){return{type:'User',id:id};})));}else return[{type:'User',id:'LIST'}];}}),addNewUser:builder.mutation({query:function query(initialUserData){return{url:'/users',method:'POST',body:_objectSpread({},initialUserData)};},invalidatesTags:[{type:'User',id:\"LIST\"}]}),updateUser:builder.mutation({query:function query(initialUserData){return{url:'/users',method:'PATCH',body:_objectSpread({},initialUserData)};},invalidatesTags:function invalidatesTags(result,error,arg){return[{type:'User',id:arg.id}];}}),deleteUser:builder.mutation({query:function query(_ref){var id=_ref.id;return{url:\"/users\",method:'DELETE',body:{id:id}};},invalidatesTags:function invalidatesTags(result,error,arg){return[{type:'User',id:arg.id}];}})};}});var useGetUsersQuery=usersApiSlice.useGetUsersQuery,useAddNewUserMutation=usersApiSlice.useAddNewUserMutation,useUpdateUserMutation=usersApiSlice.useUpdateUserMutation,useDeleteUserMutation=usersApiSlice.useDeleteUserMutation;export{useGetUsersQuery,useAddNewUserMutation,useUpdateUserMutation,useDeleteUserMutation};export var selectUsersResult=usersApiSlice.endpoints.getUsers.select();// creates memoized selector\nvar selectUsersData=createSelector(selectUsersResult,function(usersResult){return usersResult.data;}// normalized state object with ids & entities\n);//getSelectors creates these selectors and we rename them with aliases using destructuring\nvar _usersAdapter$getSele=usersAdapter.getSelectors(function(state){var _selectUsersData;return(_selectUsersData=selectUsersData(state))!==null&&_selectUsersData!==void 0?_selectUsersData:initialState;}),selectAllUsers=_usersAdapter$getSele.selectAll,selectUserById=_usersAdapter$getSele.selectById,selectUserIds=_usersAdapter$getSele.selectIds;export{selectAllUsers,selectUserById,selectUserIds};","map":{"version":3,"names":["createSelector","createEntityAdapter","apiSlice","usersAdapter","initialState","getInitialState","usersApiSlice","injectEndpoints","endpoints","builder","getUsers","query","validateStatus","response","result","status","isError","keepUnusedDataFor","transformResponse","responseData","loadedUsers","map","user","id","_id","setAll","providesTags","error","arg","ids","type","concat","_toConsumableArray","addNewUser","mutation","initialUserData","url","method","body","_objectSpread","invalidatesTags","updateUser","deleteUser","_ref","useGetUsersQuery","useAddNewUserMutation","useUpdateUserMutation","useDeleteUserMutation","selectUsersResult","select","selectUsersData","usersResult","data","_usersAdapter$getSele","getSelectors","state","_selectUsersData","selectAllUsers","selectAll","selectUserById","selectById","selectUserIds","selectIds"],"sources":["C:/Users/yeldos.k/Desktop/final-map-app/client/client/src/features/users/usersApiSlice.js"],"sourcesContent":["import {\r\n    createSelector,\r\n    createEntityAdapter\r\n} from \"@reduxjs/toolkit\";\r\nimport { apiSlice } from \"../../app/api/apiSlice\";\r\n\r\nconst usersAdapter = createEntityAdapter({})\r\n\r\nconst initialState = usersAdapter.getInitialState()\r\n\r\nexport const usersApiSlice = apiSlice.injectEndpoints({\r\n    endpoints: builder => ({\r\n        getUsers: builder.query({\r\n            query: () => '/users',\r\n            validateStatus: (response, result) => {\r\n                return response.status === 200 && !result.isError\r\n            },\r\n            keepUnusedDataFor: 5,\r\n            transformResponse: responseData => {\r\n                const loadedUsers = responseData.map(user => {\r\n                    user.id = user._id\r\n                    return user\r\n                });\r\n                return usersAdapter.setAll(initialState, loadedUsers)\r\n            },\r\n            providesTags: (result, error, arg) => {\r\n                if (result?.ids) {\r\n                    return [\r\n                        { type: 'User', id: 'LIST' },\r\n                        ...result.ids.map(id => ({ type: 'User', id }))\r\n                    ]\r\n                } else return [{ type: 'User', id: 'LIST' }]\r\n            }\r\n        }),\r\n        addNewUser: builder.mutation({\r\n            query: initialUserData => ({\r\n                url: '/users',\r\n                method: 'POST',\r\n                body: {\r\n                    ...initialUserData,\r\n                }\r\n            }),\r\n            invalidatesTags: [\r\n                { type: 'User', id: \"LIST\" }\r\n            ]\r\n        }),\r\n        updateUser: builder.mutation({\r\n            query: initialUserData => ({\r\n                url: '/users',\r\n                method: 'PATCH',\r\n                body: {\r\n                    ...initialUserData,\r\n                }\r\n            }),\r\n            invalidatesTags: (result, error, arg) => [\r\n                { type: 'User', id: arg.id }\r\n            ]\r\n        }),\r\n        deleteUser: builder.mutation({\r\n            query: ({ id }) => ({\r\n                url: `/users`,\r\n                method: 'DELETE',\r\n                body: { id }\r\n            }),\r\n            invalidatesTags: (result, error, arg) => [\r\n                { type: 'User', id: arg.id }\r\n            ]\r\n        }),\r\n    }),\r\n})\r\n\r\nexport const {\r\n    useGetUsersQuery,\r\n    useAddNewUserMutation,\r\n    useUpdateUserMutation,\r\n    useDeleteUserMutation,\r\n} = usersApiSlice\r\n\r\n\r\nexport const selectUsersResult = usersApiSlice.endpoints.getUsers.select()\r\n\r\n// creates memoized selector\r\nconst selectUsersData = createSelector(\r\n    selectUsersResult,\r\n    usersResult => usersResult.data // normalized state object with ids & entities\r\n)\r\n\r\n//getSelectors creates these selectors and we rename them with aliases using destructuring\r\nexport const {\r\n    selectAll: selectAllUsers,\r\n    selectById: selectUserById,\r\n    selectIds: selectUserIds\r\n    // Pass in a selector that returns the users slice of state\r\n} = usersAdapter.getSelectors(state => selectUsersData(state) ?? initialState)"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}